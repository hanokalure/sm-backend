name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create models directory
      run: mkdir -p models

    - name: Run setup script (dry run)
      run: python setup_local.py || echo "Setup script completed with warnings"
      continue-on-error: true

    - name: Test API startup (without models)
      run: |
        timeout 30s python main.py &
        sleep 10
        curl -f http://localhost:8000/health || echo "API health check completed"
      continue-on-error: true
      if: runner.os == 'Linux'

    - name: Test API startup Windows
      run: |
        Start-Process python -ArgumentList "main.py" -NoNewWindow
        Start-Sleep -Seconds 10
        try { Invoke-WebRequest -Uri "http://localhost:8000/health" } catch { Write-Host "API test completed" }
      continue-on-error: true
      if: runner.os == 'Windows'

    - name: Test connection script
      run: python test_connection.py || echo "Connection test completed"
      continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Check code formatting with black
      run: black --check --diff .
      continue-on-error: true

    - name: Check import sorting with isort
      run: isort --check-only --diff .
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities with safety
      run: safety check
      continue-on-error: true

    - name: Security linting with bandit
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json